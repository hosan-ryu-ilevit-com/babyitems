// Core product data structure
export interface CoreValues {
  temperatureControl: number;    // 온도 조절/유지 성능 (1-10)
  hygiene: number;               // 위생/세척 편의성 (1-10)
  material: number;              // 소재/안전성 (1-10)
  usability: number;             // 사용 편의성 (1-10)
  portability: number;           // 휴대성 (1-10)
  priceValue: number;            // 가격/가성비 (1-10)
  durability: number;            // 내구성/A/S (1-10)
  additionalFeatures: number;    // 부가 기능/디자인 (1-10)
}

// Product interface
export interface Product {
  id: string;                    // 쿠팡 아이디
  title: string;
  price: number;
  reviewCount: number;
  reviewUrl: string;             // 리뷰 페이지 URL
  ranking: number;
  thumbnail: string;
  coreValues: CoreValues;
}

// Chat message
export interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: number;
  phase?: 'chat1' | 'chat2';
  isImportanceQuestion?: boolean;  // 중요도 질문 메시지인지 여부
  isConfirmation?: boolean;        // 확인 메시지인지 여부
  details?: string[];              // 속성 디테일 리스트 (토글 형식으로 표시)
}

// User's importance rating for each attribute
export type ImportanceLevel = '보통' | '중요' | '매우 중요';

export interface AttributeAssessment {
  temperatureControl: ImportanceLevel | null;
  hygiene: ImportanceLevel | null;
  material: ImportanceLevel | null;
  usability: ImportanceLevel | null;
  portability: ImportanceLevel | null;
  priceValue: ImportanceLevel | null;
  durability: ImportanceLevel | null;
  additionalFeatures: ImportanceLevel | null;
}

// User persona generated by AI
export interface UserPersona {
  summary: string;                // 페르소나 요약
  coreValueWeights: CoreValues;   // 가중치 (1-10)
  contextualNeeds: string[];      // 추가 맥락 (예: "쌍둥이", "야간 수유 많음")
  budget?: number;                // 예산 (optional)
}

// Reflection result
export interface ReflectionResult {
  isValid: boolean;
  confidence: number;             // 0-100
  issues: string[];
  suggestedRevisions: {
    field: string;
    currentValue: string | number | boolean | null | undefined;
    suggestedValue: string | number | boolean | null | undefined;
    reason: string;
  }[];
}

// Product evaluation grade
export type EvaluationGrade = '매우 충족' | '충족' | '보통' | '미흡' | '매우 미흡';

// Single attribute evaluation
export interface AttributeEvaluation {
  attribute: keyof CoreValues;
  grade: EvaluationGrade;
  reason: string;
}

// Product evaluation by AI
export interface ProductEvaluation {
  productId: string;
  evaluations: AttributeEvaluation[];
  overallScore: 1 | 2 | 3 | 4 | 5;  // 전체적인 평가 점수 (1: 매우 미흡 ~ 5: 매우 충족)
}

// Validation result for evaluations
export interface ValidationResult {
  productId: string;
  isValid: boolean;
  invalidEvaluations: {
    attribute: string;
    issue: string;
    suggestedGrade?: EvaluationGrade;
  }[];
}

// Final recommendation
export interface Recommendation {
  product: Product;
  rank: 1 | 2 | 3;
  finalScore: number;
  personalizedReason: {
    strengths: string[];
    weaknesses: string[];
  };
  comparison: string;
  additionalConsiderations: string;
}

// Conversational flow state
export interface ConversationalState {
  currentAttribute: keyof CoreValues | null;  // 현재 진행 중인 속성
  awaitingResponse: boolean;                   // 사용자 답변 대기 중
  hasAskedFollowUp: boolean;                   // 추가 질문 중인지 여부
  isIntroduced: boolean;                       // 인트로 완료 여부
}

// Session state
export interface SessionState {
  phase: 'home' | 'ranking' | 'chat1' | 'chat2' | 'result';
  messages: Message[];
  attributeAssessments: AttributeAssessment;
  currentAttribute: number;       // 현재 질문 중인 속성 (0-7)
  additionalContext: string[];    // Chat 2에서 수집한 추가 맥락
  accuracy: number;               // 추천 정확도 (80-100)
  conversationalState?: ConversationalState;  // 대화형 상태
  persona?: UserPersona;
  recommendations?: Recommendation[];
}

// Gemini API request/response types
export interface GeminiMessage {
  role: 'user' | 'model';
  parts: { text: string }[];
}

export interface GeminiRequest {
  contents: GeminiMessage[];
  generationConfig?: {
    temperature?: number;
    topK?: number;
    topP?: number;
    maxOutputTokens?: number;
  };
}

export interface GeminiResponse {
  candidates: {
    content: {
      parts: { text: string }[];
      role: string;
    };
    finishReason: string;
  }[];
}
